<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Инструкция по работе с программой "vpsys", версия 0.3</title>
</head>
<body>
ВНИМАНИЕ! Программа предоставляется "как есть", за возможные последствия
автор ответственности не несёт. Поэтому убедительная просьба, не использовать
VPSYS для расчётов, угожающих жизни людей, хомяков и пр.

<h2>О программе</h2>

<b>VPSYS</b> - консольная скриптовая программа для моделирования динамических
систем. Работа с программой заключается в задании элементов системы и указании
связей между ними. Например, следующий код рассчитает квадрат синуса на
заданном интервале и сохранит результат в файл.

<p> <code>
&src a: func = "sin"  # источник - синусоида   <br>
&sync b: fname = "sin.dat" # данные в файл "sin.dat"  <br>
a -> [pow,2] b     # установка связи, вставка возведения в квадрат <br>
run 0...1, 0.05  # расчёт при изменении от 0 до 1 с шагом 0.05   <br>
</code></p>

<h3>Режимы работы</h3>

<p> VPSYS работает в режиме интерпретации или исполнения. Если вызвать программу,
передав ей в качестве аргумента файл с исполняемым скриптом, она обработает его
инструкции и затем завершится, что соответсвует режиму исполнения. При этом
загружаются только минимально необходимые для работы компоненты. Если аргументов
командной строки не было, программа откроется в режиме интерпретации, напечатает
приветствие и приглашение к вводу <i>'>>'</i>, после чего все вводимые пользователем
команды будут немедленно обработаны.   <br>
В интерактивном режиме VPSYS может работать и как калькулятор, обрабатывая
математические выражения и используя пользовательские переменные и константы.
Если результат выражения не был явно присвоен какой-либо переменной, он временно
сохраняется в <i>'%ans'</i>.
</p>
<p> <code>
>> sin(%pi/6)+1/2 <br>
1.0000  <br>
>> %ans  <br>
1.0000
</code></p>

<h3>Запуск программы</h3>

VPSYS работает без установки, достаточно запустить исполняемый файл
<i>vpsys.exe</i>.

<h3>Локализация</h3>

<p> Язык программы по-умолчанию - английский. Все имена элементов, типов и т.д.
 должны быть набраны латиницей, иначе корректная работа не гарантируется. Однако
 интерфейсные сообщения VPSYS могут быть локализованы с помощью lng-файлов.
 В настоящий момент доступны файлы английского языка (<i>en.lng</i> -  как
 эталонный), русского (<i>ru.lng</i>) и эсперанто (<i>eo.lng</i>). Для требуемой
 локализации соответствующий файл должен быть прописан в настройках и находиться
 в том же каталоге, что и <i>vpsys.exe</i>.
</p>
<p> При желании, вы можете отредактировать существующий языковый файл, или создать
новый. Все сообщения хранятся в виде <br>
<i>"ключ", "Текст"</i>.<br>
По-этому, если вы хотите перевести программу, например, на клингонский, вам
достаточно поменять тексты сообщений, сохранить файл в кодировке UTF-8, и,
желательно, сменить имя на какой-нибудь <i>kl.lng</i>.
</p>

<h3>Настройка</h3>

<p>Для настройки используется файл <i>vpsys.conf</i>, который будет сформирован
при первом запуске программы (если его раньше не было). Чтобы внести изменения
в файл, откройте его в любом текстовом редакторе типа "блокнот". В настоящий
момент доступны следующий параметры настройки:
<ul>
<li> <i>lang</i> - язык (чтобы включить русский язык, поставьте 'ru')
<li> <i>use_log</i> - использование лога работы с программой (yes/no - да/нет)
<li> <i>new_log</i> - перезаписывать файл лога (no - нет - продолжать старый)
<li> <i>dt</i> - шаг времени по-умолчанию, с (если не задан явно при расчёте)
<li> список констант, задаваемых пользователем
</ul>
При необходимости внесите требуемые изменения и сохраните файл.
</p>

<h3>Логирование</h3>

<p> По-умолчанию, вводимые пользователем команды и выводимые сообщения об ошибках
программа сохраняет в файл <i>vpsys.log</i>. Чтобы файл не разрастался, забивая
память компьютера, для каждой сессии он перезаписывается заново (это свойство
можно изменить в параметре <i>new_log</i> настроек). Если сессия в интерактивном
режиме прошла без ошибок, вы можете сохранить файл лога под другим именем и в
дальнейшем использовать как готовый скрипт для исполнения. Если же возникли
ошибки, которых, по вашему мнению, быть не должно, просьба сообщить об этом
<a href="mailto:vpsys@yandex.ru">разработчику</a> и приложить к сообщению файл
лога.  </p>

<h2>Работа с программой</h2>

<h3>Типы данных</h3>

<p> В программе используется динамическая типизация. Основной тип данных в VPSYS
- числа. Программа различает целые числа, комплексные (содержащие множитель -
мнимую единицу <i>'%i'</i>) и вещественные (с плавающей запятой). Числа могут
объединяться в одномерные и многомерные массивы (в настоящий момент они недоступны).
Для записи текстовой информации используются строки, т.е. последовательности
символов, заключённые в двойные кавычки (""). Логические данные представлены
числами, при этом занчению 'false' соответствует ноль, всё остальное - 'true'. Вы
также можете явно записывать логические ноль и единицу как false и true соответственно,
кавычки при этом не ставятся, т.к. иначе программа решит, что ей переданы строки.
</p>

<h3>Элементы синтаксиса</h3>

<p>В VPSYS регистр команды роли не играет, вы можете писать так, как вам больше
нравится, программа всё равно поймёт. Это правило не относится только к строкам.
</p>
<p> Каждый оператор записывается в отдельной строке, переход на следующую строку
означает конец оператора. В том случае, когда части составного выражения могут
разделяться запятыми, возможна его запись в несколько строк, при этом в конце
каждой строки должна стоять запятая. Если интерпретатор ожидает продолжения
ввода команды, вид приглашения изменяется с <i>'>>'</i> на <i>'...'</i>. В частности,
многострочный текст будет считываться до тех пор, пока не встретится закрывающая
кавычка.   </p>

<p>В программе используются строчные комментарии, которые начинаются со знака '#'.
<br>Для определения значения какого-либо слова используются ключевые знаки. Так,
'@' ставится перед именем графа, '&' - типа, '%' - числовой переменной или константы.
Имя коннектора записывается в одинарных кавычках.
<br>В большинстве случаев знак вопроса после оператора позволяет получить
информацию о нём, например, запись <i>@base ?</i> выведет информацию об указанном
графе.  </p>

<h3>Элементы схемы</h3>

<h4>Графы</h4>

<p>В данной программе графом названо множество элементов, связанных, или не
связанных между собой. Все создаваемые элементы добавляются в текущий граф (
по-умолчанию <i>'@base'</i>). Чтобы создать новый граф, нужно записать его имя
после знака '@'. При этом можно через двоеточие добавить описание в кавычках. Например,
<br><code>@second: "This is second graph"</code>
<br>приведёт к созданию графа 'second' и началу работы с ним. Чтобы вернуться к
графу 'base', введите <i>'@base'</i>. </p>

<p>Узнать список доступных графов можно с помощью команды <br>
<code>@...?</code><br>
Запись <br>
<code>@base?</code><br>
вернёт описание графа (если было задано) и список элементов, относящихся к
нему. </p>

<p>Граф, кроме всего прочего, играет роль пространства имён. Т.е. в схеме могут
существовать одноимённые элементы, если они относятся к разным графам. Вы можете
уточнить, какой элемент имеете ввиду, для этого запишите его в виде <i>
'элемент@граф'</i>.  </p>

<h4>Типы элементов</h4>

<p>Каждый элемент, составляющий схему, относится к тому или иному типу. Т.е.
характеризуется определённым набором параметров, входных и выходных коннекторов,
и, главное, имеет определённый алгоритм обработки потока данных. VPSYS содержит
базовый набор типов, а также предоставляет средства создания пользовательских
элементов, как с помощью встроенного скриптового языка, так и через <b>C</b>-API.
(В дальнейшем предполагается добавить работу с <b>Lua</b>). Скриптовое описание
типа должно быть сохранено в виде файла с именем <i>'новый_тип.t'</i> в той же
папке, где находится исполняемый файл. </p>

<p> Чтобы узнать список доступных типов, введите команду <br>
<code>&...?</code><br>
Информацию о конкретном типе можно получить, если поставить знак вопроса после
его имени, например, <br>
<code>&src ?</code>  </p>

<h4>Элементы</h4>

<p>Элемент - основная структурная единица программы. Именно он в процессе работы
изменяет своё состояние и поток проходящих через него данны. <br>
Чтобы создать элемент, запишите его имя после имени типа <br>
<code>&src element1</code><br>
Тип нужно указывать только при создании, для дальнейших изменений необходимо только
имя самого элемента. Причём, изменения можно вносить в любое время (а не только
при создании). </p>

<p>  Если вы хотите добавить описание, запишите его через двоеточие <br>
<code>element1: "Источник сигнала номер 1"</code> <br>
Пока вы не внесли изменения, параметры элемента имеют значения по-умолчанию.
Изменить их можно с помощью записи <i>'параметр = значение'</i>, например, <br>
<code>element1: func = "lin", k = 3.5, t0 = -1</code> <br>
Параметры можно задать и при создании элемента: <br>
<code>&src element1: func = "lin", k = 3.5, <br>
t0 = -1 # длинные перечисления можно переносить</code> <br>
Получить информацию об элементе можно также с помощью знака вопроса.  </p>

<h4>Связи</h4>

<p>Как правило, элементы имеют входы и выходы, которые названы в программе
коннекторами. Коннектор не только передаёт данные, но также содержит информацию о
присоединённых элементах и поддерживаемом типе данных.   <br>
Для осуществления взаимодействия элементы нужно связать. Связь формируется с
помощью стрелки '->', направленной от выхода одного элемента ко входу другого:
Выходные данные могут быть переданы на произвольное число входов, однако входной
коннектор большинства элементов может быть соединён только с одним выходным
коннектором другого элемента. Исключением является, например, сумматор, который
складывает входные данные с нескольких элементов.  </p>

<p>Чтобы связать 2 элемента, укажите их имена и коннекторы: <br>
<code>a'outM' -> 'inN'b # имя коннекора заключается в одинарные кавычки</code> <br>
Если у элементов только один входной и выходной коннекторы, или вы хотите
использовать именно первый из них, имя в кавычках можно опустить: <br>
<code>a -> b</code> <br>
Длинные последовательности можно разбить на фрагменты, разделённые запятыми,
либо записать слитно: <br>
<code>a -> b -> c -> d, c -> e, c -> f -> b, e -> g</code> <br>
Порядок перечисления роли не играет, главное правильно указать направление. При
подготовке к обработке программа сама расставит элементы в нужной последовательности.
</p>

<h4>Свёртки</h4>

<p>Если над потоком данных нужно использовать какие-то простые действия, например,
умножение на константу или вычисление логарифма, требуется создать и добавить в
цепочку элементы соответствующих типов. Однако эту работу можно поручить
интерпретатору с помощью "свёртки", т.е. указания преобразования в квадратных скобках.
Свёртка записывается перед входным коннектором и может состоять из нескольких
выражений. Например, выражение <br>
<code>a -> [* %pi/2][sin] b </code> <br>
сначала умножает данные на "пи" пополам, затем извлекает синус, и только после
этого передаёт их в 'b'. </p>

<h4>Подготовка и запуск</h4>

<p> Когда элементы созданы и связи установлены, необходимо подготовить схему для
обработки, построить "цепочку". Для этого служит команда 'Chain'. Выражение
'chain ?' отобразит последовательность обработки, найденную программой. </p>

<p>Запуск на исполнение осуществляет команда 'Run', после которой нужно указать
интервал времени и требуемый шаг: <br>
<code>run -1...1, 0.001 # интервал записан через многоточие, шаг - через запятую
</code> <br>
По-умолчанию начало интервала равно 0, величина шага выставляется в настройках,
по-этому запись в отдельных случаях может быть сокращена, например: <br>
<code>run 10</code> <br>
будет производить вычисления на интервале от 0 до 10 с шагом, указанным в настройках.
</p>

<h2>Дополнительно</h2>

(Список математических функций и базовых элементов по мере развития проекта
будет расширяться)

<h3>Математические функции</h3>

Все функции работают на множестве комплексных чисел.

<ul>
<li> <i>sin(a)</i> - синус числа 'a'
<li< <i>cos(a)</i> - косинус числа 'a'
<li> <i>tan(a)</i> - тангенс числа 'a'
<li> <i>exp(a)</i> - экспоненциальная функция числа 'a'
<li> <i>abs(a)</i> - модуль числа 'a'
<li> <i>rand(a)</i> - случайное число от 0 до 'a'
<li> <i>pow(a,k)</i> - число 'a' в степени 'k'
<li> <i>pow2(a)</i> - квадрат числа 'a'
<li> <i>sqrt(a)</i> - квадратный корень числа 'a'
<li> <i>ln(a)</i> - натуральный логарифм числа 'a'
</ul>

<h3>Базовые типы элементов</h3>

<h4>&SRC</h4>

Простой источник сигналов: <br>
k, k*(t-t0), sin(k*(t-t0), rand(k)
<p><b>Параметры</b></p>
<table border="1">
<tr>
  <th>Наименование</th><th>По-умолчанию</th><th>Описание</th>
</tr>
<tr>
  <th>func</th><th>"const"</th>
  <th>тип сигнала ("const" - постоянная величина, "lin" - линейная
зависимость, "sin" - синусоида, "rand" - случайная величина)</th>
</tr>
<tr>
  <th>k</th><th>1.0</th>
  <th>для "const" значение, для "lin" угол наклона, для "sin" частота,
для "rand" предел</th>
</tr>
<tr>
  <th>t0</th> <th>0.0</th>
  <th>начальный сдвиг времени</th>
</tr>
</table>

<p><b>Выходы</b></p>
<ul>
<li> <i>out0</i> - тип числовой, размерность 1
</ul>

<h4>&SYNC</h4>

Приёмник, сохраняте данные в файл или выводит на экран

<p><b>Параметры</b></p>
<ul>
<li> <i>fname</i> - имя файла, если не задано, вывод на экран (= "")
<li> <i>delim</i> - разделитель (= " ")
<li> <i>scale</i> - шаг отображения по времени (промежуточные результаты не
выводятся) (= 0.1)
</ul>

<p><b>Входы</b></p>
<ul>
<li> <i>in0</i> - тип произвольный
</ul>

<h4>&SUM</h4>

Суммирование (для строк конкатенация) входных данных

<p><b>Входы</b></p>
<ul>
<li> <i>in0</i> - тип произвольный
</ul>

<p><b>Выходы</b></p>
<ul>
<li> <i>out0</i> - тип произвольный
</ul>

<h4>&CONST</h4>

Изменение данных на постоянную величину <br>
(+k, -k, *k, /k)

<p><b>Параметры</b></p>
<ul>
<li> <i>op</i> - вид операции ("+", "-", "*", "/") (= "*")
<li> <i>k</i> - константа (= 1)
</ul>

<p><b>Входы</b></p>
<ul>
<li> <i>in0</i> - тип числовой, размер произвольный
</ul>

<p><b>Выходы</b></p>
<ul>
<li> <i>out0</i> - тип числовой, размер произвольный
</ul>

<h4>&FUNC</h4>

Применение к потоку данных математической функции

<p><b>Параметры</b></p>
<ul>
<li> <i>f</i> - имя функции (= "")
<li> <i>arg1</i> - второй аргумент для функции 2-х переменных (= 1)
</ul>

<p><b>Входы</b></p>
<ul>
<li> <i>in0</i> - тип числовой, размер произвольный
</ul>

<p><b>Выходы</b></p>
<ul>
<li> <i>out0</i> - тип числовой, размер произвольный
</ul>

<h2>Создание новых типов</h2>

<h3>Встроенный скриптовый язык</h3>

Для быстрого прототипирования пользовательских элементов в программу был добавлен
скриптовый язык, синтаксически напоминающий <b>Basic</b>. По мере развития его
возможности будут расширены, однако для создания сложных функций планируется
интергировать в программу возможность работы с <b>Lua</b>.

<h4>Файлы</h4>

Пользовательское описание типа должно быть сохранено в файле с расширением 't'.
Имя файла и типа совпадают. После этого с пользовательским типом можно обращаться
как со встроенным, т.е. просто использовать при создании элемента. Программа
сперва проверит наличие типа среди уже зарегистрированных, а затем перейдёт к t-файлам,
и если удалось найти нужный, попытается его зарегистрировать. <br>
Описание типа можно добавить в виде строки в начале файла.

<h4>Параметры и коннекторы</h4>

Параметры и коннекторы описываются в виде <br>
<code>...объявление <br>
имя: характеристики</code><br>
После каждого объявления можно записать несколько параметров/коннекторов. Также
допускается просто перечислить их имена через запятую, если используются значения
по-умолчанию.
<p><b>Параметры</b> <br>
Объявляются с помощью <i>'...PAR'</i>. Значение присваивается конструкцией <i>'val = '
</i>, после которой записывается число, строка или true/false. </p>

<p><b>Коннекторы</b> <br>
Объявляются с помощью <i>'...IN'</i> или <i>'...OUT'</i>. Тип данных задаётся выражением
<i>'type = '</i>. Число описывают идентификатором <i>'number'</i>, массив - <i>
'array[size]'</i>, произвольный тип - <i>'any'</i>.
</p>

<p><b>Функции</b> <br>
Описание параметров и коннекторов можно чередовать произвольно. Функция же должна
описываться последней. Её объявление имеет вид <i>'...FUNC'</i>. Тело функции
составляет алгоритм обработки данных и может состоять из операций присваивания,
условного перехода или циклов "пока". <br>
При присваивании в левой части должна стоять переменная, в правой - значение. Если
переменной с заданным именем не существовало, она будет создана. Имена параметров
и коннекторов также рассматирваются как переменные.
Условный переход осуществляется конструкцией <i>'if (условие) then (действия1)
[else (действия2)] end'</i>.<br>
Циклы в настоящий момент организуются только с помощью 'while': <i>'while (условие)
do (действия) end'</i>. <br>
Условие подразумевает некоторое логическое выражение. Сложное выражение может быть
получено с помощью операторов сравнения, а также операций AND, OR, NOT. <br>
Текущее время определяется переменной 'tau', шаг времени - 'dtau'.
</p>

<h4>Пример кода</h4>

<p><code>
# тип test.t    <br>
"Бесполезный пример использования скриптов" <br>
# входы       <br>
...IN    <br>
in0: type = array[1]   <br>
#выходы <br>
...OUT <br>
out0: type = number # array[1] и number одно и то же и являются значениями <br>
# по-умолчанию, поэтому могут быть опущены <br>
# параметры  <br>
...PAR    <br>
k: "множитель"   <br>
k: val = 10      <br>
# функция <br>
...FUNC <br>
if tau > 0 then <br>
out0 = sin(k*tau)    <br>
else <br>
out0 = in0 <br>
end
</code></p>

<center><small>Станислав Михель :
<a href="mailto:vpsys@yandex.ru">vpsys@yandex.ru</a></small></center>

</body>
</html>
